input {
  stdin { }
  file {
    path => [ "${HOME}/.lnpipe/logs/lnd.log*" ]
    exclude => "*.gz"
    start_position => beginning
    sincedb_path => "/dev/null"
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => "previous"
    }
  }
}

filter {
  grok {
    match => { 
      "message" => [
        "%{TIMESTAMP_ISO8601:timestamp} \[ERR\] HSWC: ChannelLink\((%{SHORT_CHAN_ID:short_chan_id})?\) unhandled error while forwarding htlc packet over htlcswitch: unable to find appropriate channel link insufficient capacity, need %{NUMBER:m_sat:int} mSAT( towards node=%{PUBKEY:pubkey})?",
        "%{TIMESTAMP_ISO8601:timestamp} \[ERR\] HSWC: ChannelLink\((%{SHORT_CHAN_ID:short_chan_id})?\) unhandled error while forwarding htlc packet over htlcswitch: incoming HTLC\(.*\) violated target outgoing link \(id=%{SHORT_CHAN_ID:outgoing_short_chan_id}\) policy: FeeInsufficient\(htlc_amt==%{NUMBER:m_sat:int} mSAT, update=\(lnwire\.ChannelUpdate\) \{",
        "%{TIMESTAMP_ISO8601:timestamp} \[ERR\] HSWC: ChannelLink\((%{SHORT_CHAN_ID:short_chan_id})?\) unhandled error while forwarding htlc packet over htlcswitch: unable to find link with destination %{SHORT_CHAN_ID:outgoing_short_chan_id}"
      ]
    }
    overwrite => [
      "message"
    ]
    pattern_definitions => {
      "SHORT_CHAN_ID" => "\d+:\d+:\d+"
      "PUBKEY" => "[0-9a-f]+"
    }
  }

  if "insufficient capacity" in [message] {
    mutate {
      add_field => { "type" => "insufficient_capacity" }
    }
  } else if "FeeInsufficient" in [message] {
    mutate {
      add_field => { "type" => "fee_insufficient" }
    }
  } else if "unable to find link with destination" in [message] {
    mutate {
      add_field => { "type" => "next_peer_not_found" }
    }
  }
  
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
    remove_field => [ "timestamp" ]
    timezone => "UTC"
  }

  mutate {
    remove_field => [ "path", "host" ]
  }

  fingerprint { }

  if "_grokparsefailure" in [tags] {
    drop { }
  }
}

output {
  elasticsearch {
    document_id => "%{fingerprint}"
    hosts => [ "${ELASTIC_HOST}" ]
    user => "${ELASTIC_USER}"
    password => "${ELASTIC_PASSWORD}"
  }
  stdout { codec => rubydebug }
}
